#include        <p18cxxx.h>
#include        <BCDlib.h>
#include        <delays.h>



char CODE1[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
unsigned char V, F, T, Degre;

#define     high           PORTBbits.RB7   
#define     medium         PORTBbits.RB6
#define     low            PORTBbits.RB5
#define     hi             PORTBbits.RB3
#define     lo             PORTBbits.RB4
char digits[3], digits1[3], digits2[3];

unsigned char i, a, k, interruptCounter;

void MESURET(void);
void MESUREV(void);
void MESUREF(void);
unsigned char state;
float value;
void setup(void);
void test2(void);
void test1(void);

void main() {

    setup();
    while (1) {

        MESURET();
           
        MESUREF();
        MESUREV();


        test1();
        test2()





                //   while(!PORTBbits.RB0);
                ;


    }
}



#pragma code ISR = 0x0008
#pragma interrupt ISR

void ISR(void) {


    if (INTCONbits.TMR0IF) {


        INTCONbits.TMR0IF = 0;
        TMR0L = 256 - 250;

        PORTC = state;

        // if (!PORTBbits.RB0)

        //   {

        ///   MESUREF();
        //   }
        //  else { 

        //    MESURET();

        //   while(!PORTBbits.RB0);
        //   
        //  }
        ///  ADCON0 = 0b00000001;
        /// ADCON1 = 0b00001011;
        ///  ADCON2 = 0b00001100;

        ADCON0 = 0b00001101;
        ADCON1 = 0b00001011;
        ADCON2 = 0b00010001;



        if (i == 1) {
          
            PORTD = CODE1[digits1[1]];
            i++;
            state = state >> 1;
           //  Delay10KTCYx(50); 
        } else if (i == 2) {
            PORTD = CODE1[digits1[2]];
            i++;
            state = state >> 1;
           // Delay10KTCYx(25); 
            
     
        }
        else if (i == 3) {
            
        INTCONbits.TMR0IF = 0;
        TMR0L = 256 - 78;
         T0CON = 0b11000101;
                
            PORTD = CODE1[digits[1]] | 0b10000000;
            i++;
            state = state >> 1;
            // Delay10KTCYx(25); 
        } else if (i == 4) {
            PORTD = CODE1[digits[2]];
            i++;
            state = state >> 1; 
           //  Delay10KTCYx(25); 
        }
          
        else if (i == 5) {
            i = 1;
            state = 0b0001000;
           
        }
    }   

}

void test1(void) {
    if (T >= 30)
        high = 1;
    else if (T >= 20 && T < 30)
        medium = 1;
    else
        low = 1;

}

void test2(void) {
    value = V/10;
    if (value >= 2.5)
        hi = 1;

    else if (value < 2.5)

        lo = 1;
}

void MESURET(void) {

    ADCON0bits.GO = 1; //Start A/D measurement
    while (ADCON0bits.GO); //Wait for A/D to finish
    T = ((unsigned int) 100 * ADRESH + 50) / 256;
    Bin2Bcd(T, digits1);

}

void MESUREV(void) {
    ADCON0bits.GO = 1; //Start A/D measurement
    while (ADCON0bits.GO); //Wait for A/D to finish
    V = ((unsigned int) 50 * ADRESH + 25) / 256;
    Bin2Bcd(V, digits);
   

}

void MESUREF(void) {
    ADCON0bits.GO = 1; //Start A/D measurement
    Bin2Bcd(F, digits2);
    while (ADCON0bits.GO); //Wait for A/D to finish

    F = ((1.8 * ((unsigned int) 100 * ADRESH + 50)) / 256) + 32;

}

void setup(void) {
    ADCON0 = 0b00001101;
    ADCON1 = 0b00001011;
    ADCON2 = 0b00010001;
    
    INTCONbits.GIE = 1;
    T0CON = 0b11000100;
    TMR0L = 256 - 250;
    INTCON2bits.RBPU = 0;

    INTCONbits.INT0IE = 1;
    INTCONbits.TMR0IE = 1;

    a = 0;
    F = 0;
    TRISD = 0x00;
    TRISC = 0x00;
    TRISB = 0x00;
   
    low = 0;
    hi = 0;
    lo = 0;

    i = 1;
    T = 0;
    V = 0;
 high = 0;
    medium = 0;
    k = 0;
    interruptCounter = 125;
    state = 0b0001000;


}
